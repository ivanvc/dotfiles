" vi:syntax=vim

call vundle#begin('~/.vim/vundle') " Initialize in custom path

Plugin 'wgibbs/vim-irblack'
Plugin 'altercation/vim-colors-solarized'
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'jeffkreeftmeijer/vim-dim'

Plugin 'kien/ctrlp.vim'
Plugin 'vifm/vifm'
Plugin 'vifm/vifm.vim'
Plugin 'itchyny/lightline.vim'

Plugin 'neovimhaskell/haskell-vim'
Plugin 'elixir-lang/vim-elixir'
Plugin 'fatih/vim-go'
Plugin 'vim-ruby/vim-ruby'
Plugin 'vim-utils/vim-ruby-fold'
Plugin 'kchmck/vim-coffee-script'
Plugin 'groenewege/vim-less'
Plugin 'vim-scripts/VimClojure'
Plugin 'slim-template/vim-slim'
Plugin 'kana/vim-smartinput'
Plugin 'tpope/vim-rails'
Plugin 'digitaltoad/vim-jade'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'derekwyatt/vim-scala'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'hashivim/vim-terraform'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'google/vim-jsonnet'
Plugin 'jparise/vim-graphql'

Plugin 'tpope/vim-fugitive'
Plugin 'jamessan/vim-gnupg'
Plugin 'rking/ag.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'fcpg/vim-waikiki'

Plugin 'junegunn/vim-emoji'

Plugin 'cehoffman/lbdbq' " contacts lookup for mutt

Plugin 'ledger/vim-ledger'

Plugin 'lervag/vimtex'

call vundle#end()                  " required

" And now Plugins specific configuration
" vim-irblack
" colorscheme ir_black               " set IR Black colorscheme
" solarized
" colorscheme solarized
colorscheme dracula

" Lightline
"let g:lightline = { 'colorscheme': 'solarized' }
let g:lightline = { 'colorscheme': 'dracula' }

" ctrlp
let g:ctrlp_map = '<Leader>t'      " remap
set wildignore+=*/vendor/local/**  " ignore vendor folder

" Rails mappings
map <leader>r :Rake<cr>
map <leader>R :.Rake<cr>

" Don't fold markdown
let g:vim_markdown_folding_disabled = 1
autocmd FileType markdown setl conceallevel=2
autocmd FileType markdown setl concealcursor=""

" Terraform configuration
let g:terraform_align=1       " override align configuration
let g:terraform_fmt_on_save=1 " auto-run terraform fmt on save

" Emoji
set completefunc=emoji#complete
function! ReplaceEmoji()
  let curr_line   = getline('.')
  let replacement = substitute(curr_line, ':\([^:]\+\):', '\=emoji#for(submatch(1), submatch(0))', 'g')
  call setline('.', replacement)
endfunction
map <leader>emo :call ReplaceEmoji()<cr>

" Vifm
map <leader>f :Vifm<CR>

" Ledger auto syntax
autocmd BufNewFile,BufRead *.journal set filetype=ledger
au FileType ledger inoremap <silent> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
au FileType ledger vnoremap <silent> <Tab> :LedgerAlign<CR>

" Waikiki
let maplocalleader = "\\"
let g:waikiki_roots = ['~/Documents/Wiki']
let g:waikiki_default_maps = 1
let g:waikiki_conceal_markdown_url = 1
map <leader>ww :e ~/Documents/Wiki/index.md<cr>
function! WaikikiSetupBuffer() abort
  setl concealcursor=""
endfun
augroup Waikiki
  au!
  autocmd User setup
        \ call WaikikiSetupBuffer()
augroup END
